
/** 
	Node Manager: 
	1. receives and sends messages over radio using RcvBigMsgC and SendBigMsgC components. 
	2. Dispatches messages to appropriate actors 
	3. Binds local services to their destinations based on the service application being executed currently
	4. Handles communication failure by re-discovering services
*/

//includes Service.h;

actor NodeManager {
	port {
		out to_sdp;	// SDMsg 
		in to_sdpACK;
		
		out to_localize_port1;
		out to_localize_port2;
		out to_localize_port3;
		out to_localize_port4;
//		out to_localize_port5;
		in to_localizeACK;
		
		out to_notify;
		in to_notifyACK;
		
		out to_readt;
		in to_readtACK;
		
		out to_wind;
		in to_windACK;
		
		out to_composer;
		in to_composerACK;
		
		out service_request; // uint16_t 
		in service_requestACK;
		
		in from_sdp; // SDMsg
		out from_sdpACK;
		
		in from_localize; // ServiceMsg
		out from_localizeACK;
		
		in from_notify; // ServiceMsg
		out from_notifyACK;
		
		in from_readt; // ServiceMsg
		out from_readtACK;
		
		in from_wind; // ServiceMsg
		out from_windACK;
		
		in from_composer; // SBindMsg
		out from_composerACK;
		
		in service_info; // SDMsg
		out service_infoACK;
		
		out objectTrigger;
		out readTinit;
		out windinit;
		in composerDone;
	} 
	implementation {
		// declare components
		components RcvBigMsgC, NodeInC, NodeOutC, SendBigMsgC, TimerC, Int3ToRfm;
		
		// connetion betweem components
		NodeInC.InternalInterface -> NodeOutC.InternalInterface;
		RcvBigMsgC.ReceiveBigMsg -> NodeInC.InputInterface;
		NodeOutC.SendInterface -> SendBigMsgC.SendBigMsg;
		
		NodeInC.Timer -> TimerC.Timer[unique("Timer")];
		NodeInC.SDTimer -> TimerC.Timer[unique("Timer")];
		NodeInC.Send -> Int3ToRfm.Int3Output;
		NodeOutC.Send -> Int3ToRfm.Int3Output;
		
		// port -> function
		from_sdp -> NodeOutC.SDInterface.output;
		from_localize -> NodeOutC.LocalizeInterface.output;
		from_notify -> NodeOutC.NotifyInterface.output;
		from_readt -> NodeOutC.ReadTInterface.output;
		from_wind -> NodeOutC.WindInterface.output;
		from_composer -> NodeOutC.ServiceBindInterface.output;
		service_info -> NodeOutC.CommFailureInterface.outputInfo;

		composerDone -> NodeInC.ComposerInterface.composed;
		
		to_sdpACK -> NodeInC.SDInterface.outputComplete;
		to_localizeACK -> NodeInC.LocalizeInterface.outputComplete;
		to_notifyACK -> NodeInC.NotifyInterface.outputComplete;
		to_readtACK -> NodeInC.ReadTInterface.outputComplete;
		to_windACK -> NodeInC.WindInterface.outputComplete;
		to_composerACK -> NodeInC.ComposerInterface.outputComplete;
		service_requestACK -> NodeOutC.CommFailureInterface.requestAccepted;

		// function -> port
		NodeInC.SDInterface.output -> to_sdp;
		NodeInC.LocalizeInterface.output_port1 -> to_localize_port1;
		NodeInC.LocalizeInterface.output_port2 -> to_localize_port2;
		NodeInC.LocalizeInterface.output_port3 -> to_localize_port3;
		NodeInC.LocalizeInterface.output_port4 -> to_localize_port4;
//		NodeInC.LocalizeInterface.output_port5 -> to_localize_port5;
		NodeInC.NotifyInterface.output -> to_notify;
		NodeInC.ReadTInterface.output -> to_readt;
		NodeInC.WindInterface.output -> to_wind;
		NodeInC.ComposerInterface.output -> to_composer;
		NodeOutC.CommFailureInterface.serviceRequest -> service_request;
		
		NodeInC.ObjectInterface.trigger -> objectTrigger;
		NodeInC.ReadTInterface.trigger -> readTinit;
		NodeInC.WindInterface.trigger -> windinit;
		
		NodeOutC.SDInterface.outputComplete -> from_sdpACK;
		NodeOutC.LocalizeInterface.outputComplete -> from_localizeACK;
		NodeOutC.NotifyInterface.outputComplete -> from_notifyACK;
		NodeOutC.ReadTInterface.outputComplete -> from_readtACK;
		NodeOutC.WindInterface.outputComplete -> from_windACK;
		NodeOutC.ServiceBindInterface.outputComplete -> from_composerACK;
		NodeOutC.CommFailureInterface.outputClear -> service_infoACK;

     actorControl {
     	// Connect these interfaces to Main for application initialization.
      RcvBigMsgC.StdControl;
      NodeInC.StdControl;
      NodeOutC.StdControl;
      SendBigMsgC.StdControl;
    }
	}
}


